
;; star変換
;; x ≡ 3 mod 9 	A[6,-4] y=4x/3-7 	B[1,-2] y=x/6-1/2
;; x ≡ 6 mod 9 	C[4,-4] y=x/3-2 	D[3,-2] y=2x/3-1
;; x ≡ 0 mod 9 	E[2,-4] y=x/12-3/4 	F[5,-2] y=8x/3-3
(define $A
  (lambda [$x $sequ]
    [(- (/ (* 4 x) 3) 7) (cons 6 (cons (- (car sequ) 4) (cdr sequ)))] ))
(define $B
  (lambda [$x $sequ]
    [(- (/ x 6) (/ 1 2)) (cons 1 (cons (- (car sequ) 2) (cdr sequ)))] ))
(define $C
  (lambda [$x $sequ]
    [(- (/ x 3) 2) (cons 4 (cons (- (car sequ) 4) (cdr sequ)))] ))
(define $D
  (lambda [$x $sequ]
    [(- (/ (* 2 x) 3) 1) (cons 3 (cons (- (car sequ) 2) (cdr sequ)))] ))
(define $E
  (lambda [$x $sequ]
    [(- (/ x 12) (/ 3 4)) (cons 2 (cons (- (car sequ) 4) (cdr sequ)))] ))
(define $F
  (lambda [$x $sequ]
    [(- (/ (* 8 x) 3) 3) (cons 5 (cons (- (car sequ) 2) (cdr sequ)))] ))


;; 拡張star変換
;; No.1 none

;; No.2 E

;; No.3 DE
(define $DE
  (lambda [$x $sequ]
    (D(E [x sequ])) ))
;; No.4 AE
(define $AE
  (lambda [$x $sequ]
    (A(E [x sequ])) ))
;; No.5 FE
(define $FE
  (lambda [$x $sequ]
    (F(E [x sequ])) ))

;; No.6 CF
(define $CF
  (lambda [$x $sequ]
    (C(F [x sequ])) ))
;; No.7 BF
(define $BF
  (lambda [$x $sequ]
    (B(F [x sequ])) ))
;; No.8 EF
(define $EF
  (lambda [$x $sequ]
    (E(F [x sequ])) ))

;; No.9 C

;; No.10 none

;; No.11 B

;; No.12 DB
(define $DB
  (lambda [$x $sequ]
    (D(B [x sequ])) ))
;; No.13 AB
(define $AB
  (lambda [$x $sequ]
    (A(B [x sequ])) ))
;; No.14 FB
(define $FB
  (lambda [$x $sequ]
    (F(B [x sequ])) ))


;; 拡張コラッツ操作
(define $extCollatz
  (lambda [$x $sequ]
    [(/ (+ (* 3 x) 1) (** 2 (car sequ))) (cdr sequ)] ))

(define $rewrite-rule-for-collatz
  (lambda [$term]
    (match term math-expr
      {[(/ $a (* ,16 (,** ,2 (+ $y ,-4))))
          (/' a  (**' 2 y))]
       [(/ $a (* ,4  (,** ,2 (+ $y ,-2))))
          (/' a  (**' 2 y))]
       [_ term]})))

(define $exponent-rewrite
  (lambda [$x $sequ]
    [(rewrite-rule-for-collatz x) sequ] ))



;; > egison -t Extension.egi で実行
;; 拡張コラッツ操作2回
(test (io (print "(map (lambda [$f1] (eq? (extCollatz [x {y s}]) (exponent-rewrite (extCollatz (extCollatz (f1 [x {y s}]))))) ) {E C B})")))
(test
  (map (lambda [$f1]
    (eq? (extCollatz [x {y s}]) (exponent-rewrite (extCollatz (extCollatz (f1 [x {y s}])))))
  ) {E C B})
)
;; 拡張コラッツ操作3回
(test (io (print "(map (lambda [$f1] (eq? (extCollatz [x {y s}]) (exponent-rewrite (extCollatz (extCollatz (extCollatz (f1 [x {y s}])))))) ) {DE AE FE CF BF EF DB AB FB})")))
(test
  (map (lambda [$f1]
    (eq? (extCollatz [x {y s}]) (exponent-rewrite (extCollatz (extCollatz (extCollatz (f1 [x {y s}]))))))
  ) {DE AE FE CF BF EF DB AB FB})
)

;; 実行結果
;; E:\me\Idris\collatzProof_DivSeq\program3>egison -t Extension.egi
;; (map (lambda [$f1] (eq? (extCollatz [x {y s}]) (exponent-rewrite (extCollatz (extCollatz (f1 [x {y s}]))))) ) {E C B})
;; []
;; {#t #t #t}
;; (map (lambda [$f1] (eq? (extCollatz [x {y s}]) (exponent-rewrite (extCollatz (extCollatz (extCollatz (f1 [x {y s}])))))) ) {DE AE FE CF BF EF DB AB FB})
;; []
;; {#t #t #t #t #t #t #t #t #t}



